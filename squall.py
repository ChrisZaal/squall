#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Daniel Kettle
# Date:   July 25 2013
#

'''
TODO: How to init an adapter, how to call it/close it

FIXME: Threading 
'''

ADAPTERS = {'sqlite3' : None,
            'sqlserver': None, # Uses odbc drivers
            'mysql': None,
            'postgres': None,
            'firebird': None}

class Session(object):
    '''
    :Description:
        Generic adapter class for the Database
        
        This class contains all the expected methods of subclasses:
        update, delete, select, insert, commit and rollback.
        HOWEVER, this class requires each method to have the drivers
        and database parameters specified, making it difficult to
        use. That is why you should import the adapters.
        
        Use this class to import adapters. A list of adapters can be
        generated by this class if you need to parse through them;
        
        By using this class, one feature of squall is to connect to 
        multiple databases simultaneously via a singleton thread per
        database
    '''
        
        
    def connect(self, db_name, **kwargs):
        '''
        :Description:
            Attempts to connect to a database; if an identical connection exists
            that you connect to, the software raises an 
            AlreadyConnectedException.
            
            If a connection is successfully made, it will add itself to the db
            pool. 
            
        :Parameters:
            
            - db_name: string; name of the database to connect to
            - **kwargs: dictionary; See the following pair data:
                - hostname: string; remote address or 'localhost' (default)
                - adapter: string; name of the driver to use or 'sqlite3' (default)
                - other parameters to pass on to SqlAdapter connect() function
            
        :Returns:
            - connected adapter object, or the api object for calling sql commands
        '''
        db_type = kwargs.get('adapter', 'sqlite3')
        if not db_type in ADAPTERS.keys():
            raise(AdapterException("Unknown Database Type"))
        db_host = kwargs.get('hostname', 'localhost')
        self.module = db(db_type) # This sets up ADAPTERS. FIXME: non obvious
        ADAPTERS[db_type].connect(db_name, **kwargs)
        # FIXME: extra step to return value, see FIXME above
        return ADAPTERS[db_type] 
    
    def disconnect(self, db_type, db_name, db_host='localhost'):
        '''
        :Description:
            Safely remove a python db adapter from the pool.
        '''
        
        self.pool[db_host][db_type][db_name].disconnect()
        self.pool[db_host][db_type][db_name] = None
    
        
    def insert(self, db_type, db_name, db_host, sql, *args):
        '''
        :Descriptions:
            Insert into the database. Actual sql will be determined at a later
            date. The Sqlite3 format from python-sqlite is simple and 
            effective.
            
        :Parameters:
            - sql: string; an sql statement. '?' characters imply a required 
              argument in the statement. 
              
        :Throws:
            - ArgumentMismatchException: When the number of '?' doesn't match
              up with the length of arguments supplied to the method.
            - RollbackException: An error occured in sending the sql statement
              to the database.  
        '''
        return self.pool[db_host][db_type][db_name].insert(sql, tuple(args))
        
    def update(self, db_type, db_name, db_host, sql, *args):
        return self.pool[db_host][db_type][db_name].update(sql, tuple(args))
    
    def delete(self, db_type, db_name, db_host, sql, *args):
        return self.pool[db_host][db_type][db_name].delete(sql, tuple(args))
    
    def select(self, db_type, db_name, db_host, sql, *args):
        return self.pool[db_host][db_type][db_name].select(sql, tuple(args))
    
    def sqldate(self, db_type, db_name, db_host):
        '''
        :Description:
            This is essentially a test method which grabs the date from a temp 
            table and returns it in a select statement. 
            
            This method should not be used except to test that a proper 
            connection has been established to the desired database.
            
            If you do not wish to implement this method, an 
            AdapterException will be thrown.
            
            Note: One area of contention is that this captures ALL Exceptions.
            TODO: Either be more specific on what exception occured, or find 
            the exact exceptions I need to watch for. (ugly)
        '''
        try:
            self.pool[db_host][db_type][db_name].date()
        except Exception as aE:
            raise AdapterException(
                'SQL date() method not implemented\n{}'.format(
                    str(aE)))
    
def db(db_type):
    '''
    :Description:
        Method assigns the imported SqlAdapter, or api object, into the
        ADAPTERS dictionary. 
        
        Please note that this method returns the module, so if you need
        methods that stem directly from the import itself (such as
        exceptions), you will need to place the return value into
        its own variable or re-call this method with the same parameters.
    '''
    import sys,importlib 
    sys.path.append('adapters')
    module = None
    if db_type == 'sqlite3':
        module = importlib.import_module('sqlite3')
        if not module is None:
            api = importlib.import_module('squallsqlite3').SqlAdapter(module)
            ADAPTERS[db_type] = api
    elif db_type == 'sqlserver':
        module = importlib.import_module('pyodbc')
        if not module is None:
            api = importlib.import_module('squallserver').SqlAdapter(module)
            ADAPTERS[db_type] = api
        
    return module


    
class AdapterException(Exception):
    def __init__(self, message):
        Exception.__init__(self, message)
        
class InvalidSqlCommandException(AdapterException):
    def __init(self, message):
        AdapterException.__init__(self, message)
        
class InvalidSqlValueException(AdapterException):
    def __init(self, message):
        AdapterException.__init__(self, message)
        
class InvalidSqlWhereClauseException(AdapterException):
    def __init(self, message):
        AdapterException.__init__(self, message)
        
class InvalidSqlConditionException(AdapterException):
    def __init(self, message):
        AdapterException.__init__(self, message)