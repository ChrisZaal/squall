#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Author: Daniel Kettle
# Date:   July 25 2013
#

class Session():
    '''
    :Description:
        Generic adapter class for the Database
        
        Use this class to import adapters. A list of adapters can be
        generated by this class if you need to parse through them;
        
        By using this class, one feature of squall is to connect to 
        multiple databases simultaneously via a singleton thread per
        database
    '''
    
    def __init__(self, db_type, db_name, db_host="localhost"):
        '''
        :Description:
            Contains a pool of connections that are identified by the
            db_type, db_name and db_host parameters. If all 3 values 
            are the same as another existing connection, it will fail.
            
        :Parameters:
            - db_type: string; Name of Adapter
                - Ex: "mysql" or "sqlite3"
            - db_name: string; Name of the Database to connect to
            - db_host: string; Address of the Database
                - Default is "localhost"
                
        :Throws:
            - UndefinedAdapterException: Requesting connection to an unknown
              database. Squall will not be able to find an adapter.
            - DatabaseNotFound: Selecting a Database that does not exist.
            - (a timeout exception for remote databases?)
            - (remote database could not connect, for invalid permissions or 
               login info, etc)
            - AdapterException: Problem with adapter, encompassess all possible
              adapter errors
        '''
        # Collection of database connections
        self.pool = {db_host: {db_type: {db_name: None}}}
        self.broadcast = True   # Sends all db commands to all conns in pool
        
        
        
    def connect(self, db_type, db_name, db_host='localhost'):
        '''
        :Description:
            Attempts to connect to a database; if an identical connection exists
            that you connect to, the software raises an 
            AlreadyConnectedException.
            
            If a connection is successfully made, it will add itself to the db
            pool. 
            
            
        '''
        
        # Fetch adapter
        # Connect using adapter
        # Add adapter to pool
        # Return object on success or None
        print("Hello world")
    
    def disconnect(self, db_type, db_name, db_host='localhost'):
        '''
        :Description:
            Safely remove a python db adapter from the pool.
        '''
        pass
        
    def insert(self, sql, *args):
        '''
        :Descriptions:
            Insert into the database. Actual sql will be determined at a later
            date. The Sqlite3 format from python-sqlite is simple and 
            effective.
            
        :Parameters:
            - sql: string; an sql statement. '?' characters imply a required 
              argument in the statement. 
              
        :Throws:
            - ArgumentMismatchException: When the number of '?' doesn't match
              up with the length of arguments supplied to the method.
            - RollbackException: An error occured in sending the sql statement
              to the database. 
              
        :Returns:
            - boolean: True if successful. 
        '''
        